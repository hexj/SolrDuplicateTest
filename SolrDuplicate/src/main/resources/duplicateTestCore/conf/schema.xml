<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--
 This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default)
 or located where the classloader for the Solr webapp can find it.

 This example schema is the recommended starting point for users.
 It should be kept correct and concise, usable out-of-the-box.

 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml

 PERFORMANCE NOTE: this schema includes many optional features and should not
 be used for benchmarking.  To improve performance one could
  - set stored="false" for all fields possible (esp large fields) when you
    only need to search on the field but don't need to return the original
    value.
  - set indexed="false" if you don't need to search on the field, but only
    return the field as a result of searching on other indexed fields.
  - remove all unneeded copyField statements
  - for best index size and searching performance, set "index" to false
    for all general text fields, use copyField to copy them to the
    catchall "text" field, and use that for searching.
  - For maximum indexing performance, use the ConcurrentUpdateSolrServer
    java client.
  - Remember to run the JVM in server mode, and use a higher logging level
    that avoids logging every request
-->

<schema name="duplicateTestCore" version="1.6">
	<!-- attribute "name" is the name of this schema and is only used for display purposes.
	   version="x.y" is Solr's version number for the schema syntax and
	   semantics.  It should not normally be changed by applications.

	   1.0: multiValued attribute did not exist, all fields are multiValued
			by nature
	   1.1: multiValued attribute introduced, false by default
	   1.2: omitTermFreqAndPositions attribute introduced, true by default
			except for text fields.
	   1.3: removed optional field compress feature
	   1.4: autoGeneratePhraseQueries attribute introduced to drive QueryParser
			behavior when a single string produces multiple tokens.  Defaults
			to off for version >= 1.4
	   1.5: omitNorms defaults to true for primitive field types
			(int, float, boolean, string...)
	 -->


	 <!-- Valid attributes for fields:
	 name: mandatory - the name for the field
	 type: mandatory - the name of a field type from the
	   <types> fieldType section
	 indexed: true if this field should be indexed (searchable or sortable)
	 stored: true if this field should be retrievable
	 docValues: true if this field should have doc values. Doc values are
	   useful for faceting, grouping, sorting and function queries. Although not
	   required, doc values will make the index faster to load, more
	   NRT-friendly and more memory-efficient. They however come with some
	   limitations: they are currently only supported by StrField, UUIDField
	   and all Trie*Fields, and depending on the field type, they might
	   require the field to be single-valued, be required or have a default
	   value (check the documentation of the field type you're interested in
	   for more information)
	 multiValued: true if this field may contain multiple values per document
	 omitNorms: (expert) set to true to omit the norms associated with
	   this field (this disables length normalization and index-time
	   boosting for the field, and saves some memory).  Only full-text
	   fields or fields that need an index-time boost need norms.
	   Norms are omitted for primitive (non-analyzed) types by default.
	 termVectors: [false] set to true to store the term vector for a
	   given field.
	   When using MoreLikeThis, fields used for similarity should be
	   stored for best performance.
	 termPositions: Store position information with the term vector.
	   This will increase storage costs.
	 termOffsets: Store offset information with the term vector. This
	   will increase storage costs.
	 termPayloads: Store payload information with the term vector. This
	   will increase storage costs.
	 required: The field is required.  It will throw an error if the
	   value does not exist
	 default: a value that should be used if no value is specified
	   when adding a document.
	 -->

	 <!-- field names should consist of alphanumeric or underscore characters only and
	  not start with a digit.  This is not currently strictly enforced,
	  but other field names will not have first class support from all components
	  and back compatibility is not guaranteed.  Names with both leading and
	  trailing underscores (e.g. _version_) are reserved.
	 -->

	 <!-- If you remove this field, you must _also_ disable the update log in solrconfig.xml
	  or Solr won't start. _version_ and update log are required for SolrCloud
	 -->
	<field name="_version_" type="long" indexed="true" stored="true"/>

	 <!-- points to the root document of a block of nested documents. Required for nested
	  document support, may be removed otherwise
	 -->
	<field name="_root_" type="string" indexed="true" stored="false"/>

	 <!-- Only remove the "id" field if you have a very good reason to. While not strictly
	 required, it is highly recommended. A <uniqueKey> is present in almost all Solr
	 installations. See the <uniqueKey> declaration below where <uniqueKey> is set to "id".
	 Do NOT change the type and apply index-time analysis to the <uniqueKey> as it will likely
	 make routing in SolrCloud and document replacement in general fail. Limited _query_ time
	 analysis is possible as long as the indexing process is guaranteed to index the term
	 in a compatible way. Any analysis applied to the <uniqueKey> should _not_ produce multiple
	 tokens
	 -->

	<field name="id"			type="string" 	indexed="true" stored="true" 	required="true" multiValued="false" />
	
    <field name="blockJoinId" type="string" indexed="true" stored="true"/>
	

	<dynamicField name="*_s"  	type="string"  		indexed="true"  stored="true" />
	<dynamicField name="*_l"  	type="long"  		indexed="true"  stored="true" />
	<dynamicField name="*_i"  	type="int"  		indexed="true"  stored="true" />
	<dynamicField name="*_t"  	type="text_general"	indexed="true"  stored="true" />
	<dynamicField name="*_ls"  	type="long"  		indexed="true"  stored="true" 	multiValued="true" />
	<dynamicField name="*_ts"  	type="text_general"	indexed="true"  stored="true" 	multiValued="true" />
	<dynamicField name="*_ss"  	type="string"		indexed="true"  stored="true" 	multiValued="true" />
	<dynamicField name="*_dt"	type="tdate" 		indexed="true"  stored="true" />
	<dynamicField name="*_b"		type="boolean" 		indexed="true"  stored="true" />

	<dynamicField name="*_s_ni"  type="string"  		indexed="false"  stored="true" />
	<dynamicField name="*_l_ni"  type="long"  		indexed="false"  stored="true" />
	<dynamicField name="*_i_ni"  type="int"  		indexed="false"  stored="true" />
	<dynamicField name="*_t_ni"	type="text_general"	indexed="false"  stored="true" />
	<dynamicField name="*_ls_ni" type="long"			indexed="false"  stored="true" 	multiValued="true" />
	<dynamicField name="*_ts_ni" type="text_general"	indexed="false"  stored="true" 	multiValued="true" />
	<dynamicField name="*_ss_ni" type="string"		indexed="false"  stored="true" 	multiValued="true" />
	<dynamicField name="*_dt_ni"	type="tdate" 		indexed="false"  stored="true" />
	<dynamicField name="*_b_ni"	type="boolean" 		indexed="false"  stored="true" />

	<!-- Zum Debuggen kann hier stored="true" gesetzt werden -->
	<dynamicField name="*_s_ns"  type="string"  		indexed="true"  stored="true" />
	<dynamicField name="*_l_ns"  type="long"  		indexed="true"  stored="true" />
	<dynamicField name="*_i_ns"  type="int"  		indexed="true"  stored="true" />
	<dynamicField name="*_t_ns"  type="text_general"	indexed="true"  stored="true" />
	<dynamicField name="*_ls_ns" type="long"			indexed="true"	stored="true" 	multiValued="true" />
	<dynamicField name="*_ts_ns" type="text_general"	indexed="true"  stored="true" 	multiValued="true" />
	<dynamicField name="*_ss_ns" type="string"		indexed="true"  stored="true" 	multiValued="true" />
	<dynamicField name="*_dt_ns"	type="tdate" 		indexed="true"  stored="true" />
	<dynamicField name="*_b_ns"	type="boolean" 		indexed="true"  stored="true" />

	<!-- TODO: diese Felddefinitionen überarbeiten
		Braucht es Unterscheidung zw. stored und not stored hier überhaupt?
   -->
   <dynamicField name="*_t_fac"  	type="string"  		indexed="true"  stored="true" />
   <dynamicField name="*_ts_fac"	type="string"		indexed="true"  stored="true" 	multiValued="true" />
   <dynamicField name="*_t_ns_fac"  type="string"  		indexed="true"  stored="true" />
   <dynamicField name="*_ts_ns_fac"	type="string"		indexed="true"  stored="true" 	multiValued="true" />

	<!-- catchall field, containing all other searchable text fields (implemented via copyField further on in this schema  -->
	<field name="text" type="text_general" indexed="true" stored="true" multiValued="true"/>

	<!-- catchall text field that indexes tokens both normally and in reverse for efficient leading wildcard queries. -->
	<field name="text_rev" type="text_general_rev" indexed="true" stored="true" multiValued="true"/>

	<copyField source="*_s" dest="text"/>
	<copyField source="*_l" dest="text"/>
	<copyField source="*_i" dest="text"/>
	<copyField source="*_t" dest="text"/>
	<copyField source="*_ls" dest="text"/>
	<copyField source="*_ts" dest="text"/>
	<copyField source="*_ss" dest="text"/>
	<copyField source="*_dt" dest="text"/>
	<copyField source="*_b" dest="text"/>

	<copyField source="*_s_ns" dest="text"/>
	<copyField source="*_l_ns" dest="text"/>
	<copyField source="*_i_ns" dest="text"/>
	<copyField source="*_t_ns" dest="text"/>
	<copyField source="*_ls_ns" dest="text"/>
	<copyField source="*_ts_ns" dest="text"/>
	<copyField source="*_ss_ns" dest="text"/>
	<copyField source="*_dt_ns" dest="text"/>
	<copyField source="*_b_ns" dest="text"/>

	<!-- Hier wird jedes text-feld in ein string-feld kopiert
		damit bei facetten-suchen der ganze text als ein string herangezogen wird
		um solche Felder klar von allen anderen unterscheiden zu können,
		bekommen sie das suffix _fac für "Facet"
		TODO: Prüfen ob es reicht, nur Felder zu kopieren die zumindest indexed
		sind
		TODO2: Weiters prüfen ob Felder die not stored sind kopiert werden müssen
	-->
	<copyField source="*_t" dest="*_t_fac" />
	<copyField source="*_t_ns" dest="*_t_ns_fac"/>
	<copyField source="*_ts" dest="*_ts_fac"/>
	<copyField source="*_ts_ns" dest="*_ts_ns_fac"/>


	<uniqueKey>id</uniqueKey>

	<fieldType name="string" class="solr.StrField" sortMissingLast="true" />
	<fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>

    <fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0"/>

    <fieldType name="tint" class="solr.TrieIntField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="date" class="solr.TrieDateField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="tdate" class="solr.TrieDateField" precisionStep="6" positionIncrementGap="0"/>
    <fieldType name="binary" class="solr.BinaryField"/>

    <!-- A text field that only splits on whitespace for exact matching of words -->
    <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>

    <fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
        <!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
        -->
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>

        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="lang/stopwords_en.txt"
                />
        <filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>

        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="lang/stopwords_en.txt"
                />
        <filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>

        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
    </fieldType>

    <fieldType name="text_en_splitting" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>

        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="lang/stopwords_en.txt"
                />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="lang/stopwords_en.txt"
                />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
    </fieldType>

    <fieldType name="text_general_rev" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.ReversedWildcardFilterFactory" withOriginal="true"
           maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
      <analyzer>

        <tokenizer class="solr.KeywordTokenizerFactory"/>

        <filter class="solr.LowerCaseFilterFactory" />

        <filter class="solr.TrimFilterFactory" />

        <filter class="solr.PatternReplaceFilterFactory"
                pattern="([^a-z])" replacement="" replace="all"
        />
      </analyzer>
    </fieldType>

    <fieldType name="phonetic" stored="false" indexed="true" class="solr.TextField" >
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
      </analyzer>
    </fieldType>

    <fieldType name="payloads" stored="false" indexed="true" class="solr.TextField" >
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>

        <filter class="solr.DelimitedPayloadTokenFilterFactory" encoder="float"/>
      </analyzer>
    </fieldType>

    <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory" />
      </analyzer>
    </fieldType>


    <fieldType name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField" />

    <fieldType name="currency" class="solr.CurrencyField" precisionStep="8" defaultCurrency="USD" currencyConfig="currency.xml" />

    <!-- German -->
    <fieldType name="text_de" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_de.txt" format="snowball" />
        <filter class="solr.GermanNormalizationFilterFactory"/>
        <filter class="solr.GermanLightStemFilterFactory"/>

      </analyzer>
    </fieldType>

    <!-- Italian -->
    <fieldType name="text_it" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!-- removes l', etc -->
        <filter class="solr.ElisionFilterFactory" ignoreCase="true" articles="lang/contractions_it.txt"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_it.txt" format="snowball" />
        <filter class="solr.ItalianLightStemFilterFactory"/>
        <!-- more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="Italian"/> -->
      </analyzer>
    </fieldType>

</schema>
